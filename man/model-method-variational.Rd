% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-variational}
\alias{model-method-variational}
\alias{variational}
\title{Run Stan's variational approximation algorithms}
\description{
The \verb{$variational()} method of a \code{\link{CmdStanModel}} object runs
Stan's variational Bayes (ADVI) algorithms.
}
\details{
CmdStan can fit a variational approximation to the posterior. The
approximation is a Gaussian in the unconstrained variable space. Stan
implements two variational algorithms. The \code{algorithm="meanfield"} option
uses a fully factorized Gaussian for the approximation. The
\code{algorithm="fullrank"} option uses a Gaussian with a full-rank covariance
matrix for the approximation.

-- \href{https://github.com/stan-dev/cmdstan/releases/latest}{\emph{CmdStan Interface User's Guide}}
}
\section{Usage}{
\preformatted{$variational(
  data = NULL,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  save_latent_dynamics = FALSE,
  dir = NULL,
  algorithm = NULL,
  iter = NULL,
  grad_samples = NULL,
  elbo_samples = NULL,
  eta = NULL,
  adapt_engaged = NULL,
  adapt_iter = NULL,
  tol_rel_obj = NULL,
  eval_elbo = NULL,
  output_samples = NULL
)
}
}

\section{Arguments shared by all fitting methods}{
 The following arguments can
be specified for any of the fitting methods (\code{sample}, \code{optimize},
\code{variational}). Arguments left at \code{NULL} default to the default used by the
installed version of CmdStan.
\itemize{
\item \code{data}: (multiple options) The data to use. One of the following:
\itemize{
\item A named list of \R objects (like for RStan). Internally this list is
then written to JSON for CmdStan using \code{\link[=write_stan_json]{write_stan_json()}}.
\item A path to a data file compatible with CmdStan (JSON or \R dump). See
the appendices in the CmdStan manual for details on using these formats.
}
\item \code{seed}: (positive integer) A seed for the (P)RNG to pass to CmdStan.
\item \code{refresh}: (non-negative integer) The number of iterations between
printed screen updates.
\item \code{init}: (multiple options) The initialization method for the parameters block:
\itemize{
\item A real number \code{x>0} initializes randomly between \verb{[-x,x]} (on the
\emph{unconstrained} parameter space);
\item \code{0} initializes to \code{0};
\item A character vector of paths (one per chain) to JSON or Rdump files. See
\code{\link[=write_stan_json]{write_stan_json()}} to write \R objects to JSON files compatible with
CmdStan.
\item A list of lists. For MCMC the list should contain a sublist for each
chain. For optimization and variational inference there should be just one
sublist. The sublists should have named elements corresponding to the
parameters for which you are specifying initial values. See \strong{Examples}.
\item A function that returns a single list with names corresponding to the
parameters for which you are specifying initial values. The function
can take no arguments or a single argument \code{chain_id}. For MCMC, if the
function has argument \code{chain_id} it will be supplied with the chain id
(from 1 to number of chains) when called to generate the initial
values. See \strong{Examples}.
}
\item \code{save_latent_dynamics}: (logical) Should auxiliary diagnostic information
about the latent dynamics be written to temporary diagnostic CSV files?
This argument replaces CmdStan's \code{diagnostic_file} argument and the content
written to CSV is controlled by the user's CmdStan installation and not
CmdStanR (and for some algorithms no content may be written). The default
is \code{save_latent_dynamics=FALSE}, which is appropriate for almost every use case
(all diagnostics recommended for users to check are \emph{always} saved, e.g.,
divergences for HMC). To save the temporary files created when
\code{save_latent_dynamics=TRUE} see the
\code{\link[=fit-method-save_latent_dynamics_files]{$save_latent_dynamics_files()}} method.
\item \code{dir}: (string) A path to a directory where CmdStan should write
its output CSV files. For interactive use this can typically be left at
\code{NULL} (temporary directory) since CmdStanR makes the CmdStan output (e.g.,
posterior draws and diagnostics) available in \R via methods of the fitted
model objects. The behavior of \code{dir} is as follows:
\itemize{
\item If \code{NULL} (the default), then the CSV files are written to a temporary
directory and only saved permanently if the user calls one of the
\verb{$save_*} methods of the fitted model object (e.g.,
\code{\link[=fit-method-save_output_files]{$save_output_files()}}). These temporary
files are removed when the fitted model object is garbage collected.
\item If a path, then the files are created in \code{dir} with names
corresponding the defaults used by \verb{$save_output_files()} (and similar
methods like \verb{$save_latent_dynamics_files()}).
}
}
}

\section{Arguments unique to the \code{variational} method}{
 In addition to the
arguments above, the \verb{$variational()} method also has its own set of
arguments. These arguments are described briefly here and in greater detail
in the CmdStan manual. Arguments left at \code{NULL} default to the default used
by the installed version of CmdStan.
\itemize{
\item \code{algorithm}: (string) The algorithm. Either \code{"meanfield"} or \code{"fullrank"}.
\item \code{iter}: (positive integer) The \emph{maximum} number of iterations.
\item \code{grad_samples}: (positive integer) The number of samples for Monte Carlo
estimate of gradients.
\item \code{elbo_samples}: (positive integer) The number of samples for Monte Carlo
estimate of ELBO (objective function).
\item \code{eta}: (positive real) The step size weighting parameter for adaptive
step size sequence.
\item \code{adapt_engaged}: (logical) Do warmup adaptation?
\item \code{adapt_iter}: (positive integer) The \emph{maximum} number of adaptation
iterations.
\item \code{tol_rel_obj}: (positive real) Convergence tolerance on the relative norm
of the objective.
\item \code{eval_elbo}: (positive integer) Evaluate ELBO every Nth iteration.
\item \verb{output_samples:} (positive integer) Number of posterior samples to draw
and save.
}
}

\section{Value}{
 The \verb{$variational()} method returns a \code{\link{CmdStanVB}} object.
}

\examples{
\dontrun{
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")

# Set path to cmdstan
# (Note: if you installed CmdStan via install_cmdstan() with default settings
# then setting the path is unnecessary but the default below should still work.
# Otherwise use the `path` argument to specify the location of your
# CmdStan installation.)
set_cmdstan_path(path = NULL)

# Create a CmdStanModel object from a Stan program,
# here using the example model that comes with CmdStan
file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()

# Data as a named list (like RStan)
stan_data <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))

# Run MCMC using the 'sample' method
fit_mcmc <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  parallel_chains = 2
)

# Use 'posterior' package for summaries
fit_mcmc$summary()

# Get posterior draws
draws <- fit_mcmc$draws()
print(draws)

# Convert to data frame using posterior::as_draws_df
as_draws_df(draws)

# Plot posterior using bayesplot (ggplot2)
mcmc_hist(fit_mcmc$draws("theta"))

# Call CmdStan's diagnose and stansummary utilities
fit_mcmc$cmdstan_diagnose()
fit_mcmc$cmdstan_summary()

# For models fit using MCMC, if you like working with RStan's stanfit objects
# then you can create one with rstan::read_stan_csv()

# stanfit <- rstan::read_stan_csv(fit_mcmc$output_files())


# Run 'optimize' method to get a point estimate (default is Stan's LBFGS algorithm)
# and also demonstrate specifying data as a path to a file instead of a list
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.json")
fit_optim <- mod$optimize(data = my_data_file, seed = 123)

fit_optim$summary()


# Run 'variational' method to approximate the posterior (default is meanfield ADVI)
fit_vb <- mod$variational(data = stan_data, seed = 123)

fit_vb$summary()

# Plot approximate posterior using bayesplot
mcmc_hist(fit_vb$draws("theta"))


# Specifying initial values as a function
fit_mcmc_w_init_fun <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = function() list(theta = runif(1))
)
fit_mcmc_w_init_fun_2 <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = function(chain_id) {
    # silly but demonstrates optional use of chain_id
    list(theta = 1 / (chain_id + 1))
  }
)
fit_mcmc_w_init_fun_2$init()

# Specifying initial values as a list of lists
fit_mcmc_w_init_list <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = list(
    list(theta = 0.75), # chain 1
    list(theta = 0.25)  # chain 2
  )
)
fit_optim_w_init_list <- mod$optimize(
  data = stan_data,
  seed = 123,
  init = list(
    list(theta = 0.75)
  )
)
fit_optim_w_init_list$init()
}

}
\seealso{
The CmdStanR website
(\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr}) for online
documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan documentation: \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation}
\item CmdStan Userâ€™s Guide: \href{https://mc-stan.org/docs/cmdstan-guide/}{mc-stan.org/docs/cmdstan-guide}
}

Other CmdStanModel methods: 
\code{\link{model-method-check_syntax}},
\code{\link{model-method-compile}},
\code{\link{model-method-generate-quantities}},
\code{\link{model-method-optimize}},
\code{\link{model-method-sample}}
}
\concept{CmdStanModel methods}
