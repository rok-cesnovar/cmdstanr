% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{model-method-sample}
\alias{model-method-sample}
\alias{sample}
\title{Run Stan's MCMC algorithms}
\description{
The \verb{$sample()} method of a \code{\link{CmdStanModel}} object runs the
default MCMC algorithm in CmdStan (\verb{algorithm=hmc engine=nuts}), to produce
a set of draws from the posterior distribution of a model conditioned on
some data.
}
\section{Usage}{
\preformatted{$sample(
  data = NULL,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  save_latent_dynamics = FALSE,
  dir = NULL,
  chains = 4,
  parallel_chains = getOption("mc.cores", 1),
  threads_per_chain = NULL,
  iter_warmup = NULL,
  iter_sampling = NULL,
  save_warmup = FALSE,
  thin = NULL,
  max_treedepth = NULL,
  adapt_engaged = TRUE,
  adapt_delta = NULL,
  step_size = NULL,
  metric = NULL,
  metric_file = NULL,
  inv_metric = NULL,
  init_buffer = NULL,
  term_buffer = NULL,
  window = NULL,
  fixed_param = FALSE,
  validate_csv = TRUE,
  show_messages = TRUE
)
}
}

\section{Arguments shared by all fitting methods}{
 The following arguments can
be specified for any of the fitting methods (\code{sample}, \code{optimize},
\code{variational}). Arguments left at \code{NULL} default to the default used by the
installed version of CmdStan.
\itemize{
\item \code{data}: (multiple options) The data to use. One of the following:
\itemize{
\item A named list of \R objects (like for RStan). Internally this list is
then written to JSON for CmdStan using \code{\link[=write_stan_json]{write_stan_json()}}.
\item A path to a data file compatible with CmdStan (JSON or \R dump). See
the appendices in the CmdStan manual for details on using these formats.
}
\item \code{seed}: (positive integer) A seed for the (P)RNG to pass to CmdStan.
\item \code{refresh}: (non-negative integer) The number of iterations between
printed screen updates.
\item \code{init}: (multiple options) The initialization method for the parameters block:
\itemize{
\item A real number \code{x>0} initializes randomly between \verb{[-x,x]} (on the
\emph{unconstrained} parameter space);
\item \code{0} initializes to \code{0};
\item A character vector of paths (one per chain) to JSON or Rdump files. See
\code{\link[=write_stan_json]{write_stan_json()}} to write \R objects to JSON files compatible with
CmdStan.
\item A list of lists. For MCMC the list should contain a sublist for each
chain. For optimization and variational inference there should be just one
sublist. The sublists should have named elements corresponding to the
parameters for which you are specifying initial values. See \strong{Examples}.
\item A function that returns a single list with names corresponding to the
parameters for which you are specifying initial values. The function
can take no arguments or a single argument \code{chain_id}. For MCMC, if the
function has argument \code{chain_id} it will be supplied with the chain id
(from 1 to number of chains) when called to generate the initial
values. See \strong{Examples}.
}
\item \code{save_latent_dynamics}: (logical) Should auxiliary diagnostic information
about the latent dynamics be written to temporary diagnostic CSV files?
This argument replaces CmdStan's \code{diagnostic_file} argument and the content
written to CSV is controlled by the user's CmdStan installation and not
CmdStanR (and for some algorithms no content may be written). The default
is \code{save_latent_dynamics=FALSE}, which is appropriate for almost every use case
(all diagnostics recommended for users to check are \emph{always} saved, e.g.,
divergences for HMC). To save the temporary files created when
\code{save_latent_dynamics=TRUE} see the
\code{\link[=fit-method-save_latent_dynamics_files]{$save_latent_dynamics_files()}} method.
\item \code{dir}: (string) A path to a directory where CmdStan should write
its output CSV files. For interactive use this can typically be left at
\code{NULL} (temporary directory) since CmdStanR makes the CmdStan output (e.g.,
posterior draws and diagnostics) available in \R via methods of the fitted
model objects. The behavior of \code{dir} is as follows:
\itemize{
\item If \code{NULL} (the default), then the CSV files are written to a temporary
directory and only saved permanently if the user calls one of the
\verb{$save_*} methods of the fitted model object (e.g.,
\code{\link[=fit-method-save_output_files]{$save_output_files()}}). These temporary
files are removed when the fitted model object is garbage collected.
\item If a path, then the files are created in \code{dir} with names
corresponding the defaults used by \verb{$save_output_files()} (and similar
methods like \verb{$save_latent_dynamics_files()}).
}
}
}

\section{Arguments unique to the \code{sample} method}{
 In addition to the
arguments above, the \verb{$sample()} method also has its own set of arguments.

The following three arguments are offered by CmdStanR but do not correspond
to arguments in CmdStan:
\itemize{
\item \code{chains}: (positive integer) The number of Markov chains to run. The
default is 4.
\item \code{parallel_chains}: (positive integer) The \emph{maximum} number of MCMC chains
to run in parallel. If \code{parallel_chains} is not specified then the default
is to look for the option \code{"mc.cores"}, which can be set for an entire \R
session by \code{options(mc.cores=value)}. If the \code{"mc.cores"} option has not
been set then the default is \code{1}.
\item \code{threads_per_chain}: (positive integer) If the model was
\link[=model-method-compile]{compiled} with threading support, the number of
threads to use in parallelized sections \emph{within} an MCMC chain (e.g., when
using the Stan functions \code{reduce_sum()} or \code{map_rect()}). This is in
contrast with \code{parallel_chains}, which specifies the number of chains to
run in parallel. The actual number of CPU cores used use is
\code{parallel_chains*threads_per_chain}. For an example of using threading see
the Stan case study \href{https://mc-stan.org/users/documentation/case-studies/reduce_sum_tutorial.html}{Reduce Sum: A Minimal Example}.
\item \code{show_messages}: (logical) When \code{TRUE} (the default), prints all
informational messages, for example rejection of the current proposal.
Disable if you wish silence these messages, but this is not recommended
unless you are very sure that the model is correct up to numerical error.
If the messages are silenced then the \verb{$output()} method of the resulting
fit object can be used to display all the silenced messages.
\item \code{validate_csv}: (logical) When \code{TRUE} (the default), validate the
sampling results in the csv files. Disable if you wish to manually read in
the sampling results and validate them yourself, for example using
\code{\link[=read_cmdstan_csv]{read_cmdstan_csv()}}.
}

The rest of the arguments correspond to arguments offered by CmdStan,
although some names are slightly different. They are described briefly here
and in greater detail in the CmdStan manual. Arguments left at \code{NULL}
default to the default used by the installed version of CmdStan.
\itemize{
\item \code{iter_sampling}: (positive integer) The number of post-warmup iterations to
run per chain.
\item \code{iter_warmup}: (positive integer) The number of warmup iterations to run
per chain.
\item \code{save_warmup}: (logical) Should warmup iterations be saved? The default
is \code{FALSE}. If \code{save_warmup=TRUE} then you can use
\link[=fit-method-draws]{$draws(inc_warmup=TRUE)} to include warmup when
accessing the draws.
\item \code{thin}: (positive integer) The period between saved samples. This should
be left at its default (no thinning) unless memory is a problem.
\item \code{max_treedepth}: (positive integer) The maximum allowed tree depth for the
NUTS engine. See the \emph{Tree Depth} section of the CmdStan manual for more
details.
\item \code{adapt_engaged}: (logical) Do warmup adaptation? The default is \code{TRUE}.
If a precomputed inverse metric is specified via the \code{inv_metric} argument
(or \code{metric_file}) then, if \code{adapt_engaged=TRUE}, Stan will use the
provided inverse metric just as an initial guess during adaptation. To turn
off adaptation when using a precomputed inverse metric set
\code{adapt_engaged=FALSE}.
\item \code{adapt_delta}: (real in \verb{(0,1)}) The adaptation target acceptance
statistic.
\item \code{step_size}: (positive real) The \emph{initial} step size for the discrete
approximation to continuous Hamiltonian dynamics. This is further tuned
during warmup.
\item \code{metric}: (character) One of \code{"diag_e"}, \code{"dense_e"}, or \code{"unit_e"},
specifying the geometry of the base manifold. See the \emph{Euclidean Metric}
section of the CmdStan documentation for more details. To specify a
precomputed (inverse) metric, see the \code{inv_metric} argument below.
\item \code{metric_file}: (character) A character vector containing paths to JSON or
Rdump files (one per chain) compatible with CmdStan that contain
precomputed inverse metrics. The \code{metric_file} argument is inherited from
CmdStan but is confusing in that the entry in JSON or Rdump file(s) must be
named \code{inv_metric}, referring to the \emph{inverse} metric. We recommend instead
using CmdStanR's \code{inv_metric} argument (see below) to specify an inverse
metric directly using a vector or matrix from your \R session.
\item \code{inv_metric}: (vector, matrix) A vector (if \code{metric='diag_e'}) or a
matrix (if \code{metric='dense_e'}) for initializing the inverse metric, which
can be used as an alternative to the \code{metric_file} argument. A vector is
interpreted as a diagonal metric. The inverse metric is usually set to an
estimate of the posterior covariance. See the \code{adapt_engaged} argument
above for details on (and control over) how specifying a precomputed
inverse metric interacts with adaptation.
\item \code{init_buffer}: (nonnegative integer) Width of initial fast timestep
adaptation interval during warmup.
\item \code{term_buffer}: (nonnegative integer) Width of final fast timestep
adaptation interval during warmup.
\item \code{window}: (nonnegative integer) Initial width of slow timestep/metric
adaptation interval.
\item \code{fixed_param}: (logical) When \code{TRUE}, call CmdStan with argument
\code{"algorithm=fixed_param"}. The default is \code{FALSE}. The fixed parameter
sampler generates a new sample without changing the current state of the
Markov chain; only generated quantities may change. This can be useful
when, for example, trying to generate pseudo-data using the generated
quantities block. If the parameters block is empty then using
\code{fixed_param=TRUE} is mandatory. When \code{fixed_param=TRUE} the \code{chains} and
\code{parallel_chains} arguments will be set to \code{1}.
}
}

\section{Value}{
 The \verb{$sample()} method returns a \code{\link{CmdStanMCMC}} object.
}

\examples{
\dontrun{
library(cmdstanr)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")

# Set path to cmdstan
# (Note: if you installed CmdStan via install_cmdstan() with default settings
# then setting the path is unnecessary but the default below should still work.
# Otherwise use the `path` argument to specify the location of your
# CmdStan installation.)
set_cmdstan_path(path = NULL)

# Create a CmdStanModel object from a Stan program,
# here using the example model that comes with CmdStan
file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()

# Data as a named list (like RStan)
stan_data <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))

# Run MCMC using the 'sample' method
fit_mcmc <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  parallel_chains = 2
)

# Use 'posterior' package for summaries
fit_mcmc$summary()

# Get posterior draws
draws <- fit_mcmc$draws()
print(draws)

# Convert to data frame using posterior::as_draws_df
as_draws_df(draws)

# Plot posterior using bayesplot (ggplot2)
mcmc_hist(fit_mcmc$draws("theta"))

# Call CmdStan's diagnose and stansummary utilities
fit_mcmc$cmdstan_diagnose()
fit_mcmc$cmdstan_summary()

# For models fit using MCMC, if you like working with RStan's stanfit objects
# then you can create one with rstan::read_stan_csv()

# stanfit <- rstan::read_stan_csv(fit_mcmc$output_files())


# Run 'optimize' method to get a point estimate (default is Stan's LBFGS algorithm)
# and also demonstrate specifying data as a path to a file instead of a list
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.json")
fit_optim <- mod$optimize(data = my_data_file, seed = 123)

fit_optim$summary()


# Run 'variational' method to approximate the posterior (default is meanfield ADVI)
fit_vb <- mod$variational(data = stan_data, seed = 123)

fit_vb$summary()

# Plot approximate posterior using bayesplot
mcmc_hist(fit_vb$draws("theta"))


# Specifying initial values as a function
fit_mcmc_w_init_fun <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = function() list(theta = runif(1))
)
fit_mcmc_w_init_fun_2 <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = function(chain_id) {
    # silly but demonstrates optional use of chain_id
    list(theta = 1 / (chain_id + 1))
  }
)
fit_mcmc_w_init_fun_2$init()

# Specifying initial values as a list of lists
fit_mcmc_w_init_list <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 2,
  refresh = 0,
  init = list(
    list(theta = 0.75), # chain 1
    list(theta = 0.25)  # chain 2
  )
)
fit_optim_w_init_list <- mod$optimize(
  data = stan_data,
  seed = 123,
  init = list(
    list(theta = 0.75)
  )
)
fit_optim_w_init_list$init()
}

}
\seealso{
The CmdStanR website
(\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr}) for online
documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan documentation: \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation}
\item CmdStan User’s Guide: \href{https://mc-stan.org/docs/cmdstan-guide/}{mc-stan.org/docs/cmdstan-guide}
}

Other CmdStanModel methods: 
\code{\link{model-method-check_syntax}},
\code{\link{model-method-compile}},
\code{\link{model-method-generate-quantities}},
\code{\link{model-method-optimize}},
\code{\link{model-method-variational}}
}
\concept{CmdStanModel methods}
